{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.33.7",
    "schemaVersion": 1010,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "update-certs!",
  "docComment": "",
  "name": "update-certs",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "update-certs!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Variable",
          "canonicalReference": "update-certs!DEFAULT_DEBOUNCE_MS:var",
          "docComment": "/**\n * Default debounce time in ms.\n *\n * If multiple filesystem events are occured during this time only one callback will be called with the final value.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DEFAULT_DEBOUNCE_MS = "
            },
            {
              "kind": "Content",
              "text": "50"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "DEFAULT_DEBOUNCE_MS",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "update-certs!DEFAULT_TIMEOUT_MS:var",
          "docComment": "/**\n * Default timeout in ms.\n *\n * Represents overall timeout. If all the files are not loaded within this time frame, callback will be called with an Error as th first argument.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DEFAULT_TIMEOUT_MS = "
            },
            {
              "kind": "Content",
              "text": "300"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "DEFAULT_TIMEOUT_MS",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "update-certs!load:function(1)",
          "docComment": "/**\n * Load certificates from files and watch for changes.\n *\n * @param certFiles - Object with paths to certificate files.\n *\n * @param cb - Callback to call when certificates are loaded or changed. If some certificates fail loading, or timeout has elapsed, cb will be called with null.\n *\n * @param opts - Options.\n *\n * @param debounceTime - Debounce time for callback, cb will be called debouncedTime ms after the last filesystem activity.\n *\n * @param timeout - Timeout for overall loading.\n *\n * @example\n * ```ts\n * import { load } from \"certs-watch\";\n * load({\n *    key: \"/path/to/key.pem\",\n *    cert: \"/path/to/cert.pem\",\n *    ca: \"/path/to/ca.pem\"\n *  }, (err, certs) => {\n *    if (err) {\n *       console.error(err);\n *       return;\n *     }\n *    if (certs) {\n *      console.log(\"Certificates loaded\");\n *    }\n * })\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function load<T extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, string>"
            },
            {
              "kind": "Content",
              "text": ">(certFiles: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ", cb: "
            },
            {
              "kind": "Content",
              "text": "(err: "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": " | null, certs: {\n    [key in keyof T]: "
            },
            {
              "kind": "Reference",
              "text": "Buffer",
              "canonicalReference": "!\"\\\"buffer\\\"\".__global.Buffer:interface"
            },
            {
              "kind": "Content",
              "text": ";\n} | null) => void"
            },
            {
              "kind": "Content",
              "text": ", opts?: "
            },
            {
              "kind": "Reference",
              "text": "LoadCertsOptions",
              "canonicalReference": "update-certs!LoadCertsOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 14,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "certFiles",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "isOptional": false
            },
            {
              "parameterName": "cb",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 11
              },
              "isOptional": false
            },
            {
              "parameterName": "opts",
              "parameterTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 13
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "load"
        },
        {
          "kind": "Interface",
          "canonicalReference": "update-certs!LoadCertsOptions:interface",
          "docComment": "/**\n * Load certificates from files and watch for changes.\n *\n * @param debouncedTime - Debounce time in ms.\n *\n * @param timeout - Timeout for overall loading.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface LoadCertsOptions "
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "releaseTag": "Public",
          "name": "LoadCertsOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "update-certs!LoadCertsOptions#debounceTime:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "debounceTime?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "debounceTime",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "update-certs!LoadCertsOptions#timeout:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "timeout?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "timeout",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "update-certs!SetSecureContextInterface:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SetSecureContextInterface = "
            },
            {
              "kind": "Content",
              "text": "{\n    setSecureContext: "
            },
            {
              "kind": "Reference",
              "text": "tls.Server",
              "canonicalReference": "!\"\\\"tls\\\"\".Server:class"
            },
            {
              "kind": "Content",
              "text": "[\"setSecureContext\"];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "releaseTag": "Public",
          "name": "SetSecureContextInterface",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "update-certs!syncCerts:function(1)",
          "docComment": "/**\n * Synchronize certificates with a TLS server.\n *\n * @param certs - Object with paths to certificate files.\n *\n * @param server - Any interface that satisfies `SetSecureContextInterface`.\n *\n * @example\n * ```ts\n * const server = https.createServer();\n * syncCerts({\n *  ca: \"/path/to/ca.pem\",\n * key: \"/path/to/key.pem\",\n * cert: \"/path/to/cert.pem\"\n * }, server);\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function syncCerts(certs: "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<\"ca\" | \"key\" | \"cert\", string>"
            },
            {
              "kind": "Content",
              "text": ", server: "
            },
            {
              "kind": "Reference",
              "text": "SetSecureContextInterface",
              "canonicalReference": "update-certs!SetSecureContextInterface:type"
            },
            {
              "kind": "Content",
              "text": ", opts?: "
            },
            {
              "kind": "Reference",
              "text": "LoadCertsOptions",
              "canonicalReference": "update-certs!LoadCertsOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "certs",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            },
            {
              "parameterName": "server",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "isOptional": false
            },
            {
              "parameterName": "opts",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "isOptional": true
            }
          ],
          "name": "syncCerts"
        }
      ]
    }
  ]
}
